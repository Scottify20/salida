import { Injectable, ElementRef, Inject, signal } from '@angular/core';
import { fromEvent, Subject, Subscription } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators'; // Import takeUntil
import { DOCUMENT } from '@angular/common';

import { ElementPositionService } from '../../services/dom/element-position.service';
import { ScrollDisablerService } from '../../services/dom/scroll-disabler.service';
import { PopoverConfig, PopoverItem } from './popover.model';

@Injectable()
export class PopoverService {
  private document: Document;
  private elementTrackingSubscription: Subscription | null = null;
  private anchorElementClickSubscription: Subscription | null = null;
  private clickedOutsidePopoverSubscription: Subscription | null = null;
  // A Subject to signal when the popover is closed
  private destroy$ = new Subject<void>();

  constructor(
    private elementPositionService: ElementPositionService,
    private scrollDisablerService: ScrollDisablerService,
    @Inject(DOCUMENT) document: Document,
  ) {
    this.document = document;
  }

  // Create a signal to manage the isOpen state
  isOpen = signal(false);

  // Method to open the popover
  openPopover(
    popoverConfig: PopoverConfig,
    popoverSectionsContainer: ElementRef,
  ) {
    this.trackAnchorElement(popoverConfig, popoverSectionsContainer);
    this.scrollDisablerService.disableBodyScroll(popoverConfig.popoverId);
    this.isOpen.set(true);
  }

  // Method to close the popover
  closePopover(popoverConfig: PopoverConfig) {
    this.scrollDisablerService.enableBodyScroll(popoverConfig.popoverId);
    this.untrackAnchorElement(popoverConfig);
    this.isOpen.set(false);
    this.destroy$.next(); // Emit a value to complete the subscriptions
  }

  // Method to start listening for clicks on the anchor element
  listenToAnchorClicks(
    anchorElement: HTMLElement,
    popoverConfig: PopoverConfig,
    popoverSectionsContainer: ElementRef,
  ) {
    this.anchorElementClickSubscription = fromEvent(anchorElement, 'click')
      .pipe(
        tap(() => {
          this.isOpen.update((prev) => !prev); // Toggle isOpen signal

          if (this.isOpen()) {
            this.openPopover(popoverConfig, popoverSectionsContainer);
          } else {
            this.closePopover(popoverConfig);
          }
        }),
        // Complete the subscription when the popover is closed
        takeUntil(this.destroy$),
      )
      .subscribe();
  }

  // Method to track the anchor element's position
  private trackAnchorElement(
    popoverConfig: PopoverConfig,
    popoverSectionsContainer: ElementRef,
  ) {
    const anchorElementId = popoverConfig.anchoringConfig.anchorElementId;
    const anchorElementRef =
      this.elementPositionService.getElementRefById(anchorElementId);

    if (!anchorElementRef) {
      console.error(
        'Anchor element not found! Popover might not work as expected.',
      );
      return;
    }

    const popover = popoverSectionsContainer.nativeElement as HTMLDivElement;
    const popoverWidth = popover.offsetWidth;
    const popoverHeight = popover.offsetHeight;

    // **Using takeUntil for Subscription Management**
    this.elementTrackingSubscription = this.elementPositionService
      .trackElementPosition$(anchorElementId, anchorElementRef)
      .pipe(
        tap((domrect) => {
          const popoverPositioning = popoverConfig.anchoringConfig.position;

          switch (popoverPositioning) {
            case 'bottom-end':
              popover.style.left = `${
                domrect.left - popoverWidth + domrect.width
              }px`;
              popover.style.top = `${
                Math.abs(domrect.top) + domrect.height + 8
              }px`;
              break;
            // Add cases for other positions as needed
            default:
              console.warn(
                `Popover position of ${popoverPositioning} is not handled yet!`,
              );
          }
        }),
        takeUntil(this.destroy$), // Complete when destroy$ emits
      )
      .subscribe();

    this.subscribeToOutsideClicks(
      popoverSectionsContainer.nativeElement,
      anchorElementRef.nativeElement,
      popoverConfig,
    );
  }

  // Method to subscribe to click events outside of the popover
  private subscribeToOutsideClicks(
    popoverElement: HTMLElement,
    anchorElement: HTMLElement,
    popoverConfig: PopoverConfig,
  ) {
    this.clickedOutsidePopoverSubscription = fromEvent(this.document, 'click')
      .pipe(
        tap((e) => {
          if (
            this.isOpen() &&
            e.target !== popoverElement &&
            e.target !== anchorElement
          ) {
            this.closePopover(popoverConfig);
          }
        }),
        // Complete the subscription when the popover is closed
        takeUntil(this.destroy$),
      )
      .subscribe();
  }

  // Method to stop tracking the anchor element's position
  private untrackAnchorElement(popoverConfig: PopoverConfig) {
    this.elementTrackingSubscription?.unsubscribe();
    this.elementPositionService.untrackElementPosition(
      popoverConfig.anchoringConfig.anchorElementId,
    );
  }

  // Method to unsubscribe from all subscriptions
  private unsubscribeSubscriptions() {
    this.elementTrackingSubscription?.unsubscribe();
    this.clickedOutsidePopoverSubscription?.unsubscribe();
    this.anchorElementClickSubscription?.unsubscribe();
  }
}
